"""PyPOWER Module testing

This script run all the cases in the pypower folder for both PF and OPF solutions.
All results are stored in the `case*_pf.out` and `case*_opf.out` unless there is an
exception generated by the solver itself, in which case the traceback is stored
in the file `case*.err`. If the PF fails, the OPF is not attempted.

"""

import os
import sys
import importlib
import json
import numpy as np
import traceback
import pkg_resources
import types

version = pkg_resources.require('pypower')[0].version

MODULEDIR = ".."
TESTDIR = f"{MODULEDIR}/pypower/t"
CASEDIR = f"{MODULEDIR}/pypower"
IGNORE = [ # modules that should be ignored by modules()
    "appdirs",
    "cachetools",
    "chardet",
    "colorama",
    "distlib",
    "filelock",
    "packaging",
    "platformdirs",
    "pluggy",
    "py",
    "pyparsing",
    "pyproject-api",
    "setuptools",
    "six",
    "toml",
    "tox",
    "virtualenv",
]

sys.path.extend([MODULEDIR,CASEDIR])
from pypower.api import runpf, runcpf, runopf, ppoption, opf_model

tested = 0
failed = 0

def modules():
    """Get pypower runtime required modules in appjson format"""
    with open(f"{MODULEDIR}/requirements.txt","r") as fh:
        reqs = dict([x.strip().split("==",1) for x in fh.readlines() 
            if not x.strip().startswith("#")])
    return {x:{"version":y} for x,y in reqs.items() if x not in IGNORE}

class NumpyEncoder(json.JSONEncoder):
    """JSON encoder for numpy arrays"""
    def default(self, obj):
        if isinstance(obj, np.ndarray):
            return obj.tolist()
        if isinstance(obj, opf_model):
            return {x:(y.tolist() if hasattr(y,"tolist") else y) for x,y in obj.user_data.items()}
        if isinstance(obj, complex):
            return f"{obj.real:g}{obj.imag:+g}j"
        return super().default(obj)

def delete(files):
    """Delete files if found"""
    for file in files:
        try:
            os.remove(file)
        except:
            pass

def savejson(casedata,fh,result=None,**kwargs):
    """Save casedata as a JSON application file"""
    if "indent" not in kwargs:
        kwargs["indent"] = 4
    json.dump({
        "application": "pypower",
        "version": version,
        "modules" : modules(),
        "problem" : casedata,
        "solution" : result,
        },fh,cls=NumpyEncoder,**kwargs)

# first run tox testing of pypower
print(f"Testing all pypower v{version} tests in {TESTDIR}...")
os.system(f"{os.environ['_']} {TESTDIR}/test_pypower.py")

# now run pypower cases
print(f"Testing all pypower v{version} cases in {CASEDIR}...")
for case in os.listdir(CASEDIR):

    # only test files that start with "case" and end in ".py"
    if case.startswith("case") and case.endswith(".py"):
        name = os.path.splitext(case)[0]
        module = importlib.__import__(name)
        try:

            # clean-up any old output files
            delete([f"{name}_pf.out",f"{name}_opf.out",f"{name}.err"])

            # only test modules that contain a function by the same name per convention
            if hasattr(module,name):

                tested += 1
                print(f"Solving {case} problems",end="... ",flush=True,file=sys.stdout)
                
                # get case data from file
                casedata = getattr(module,name)()                
                ppopt = ppoption(VERBOSE=0,OUT_ALL=0)

                if "target" in name:

                    print("CPF",end="... ",flush=True,file=sys.stdout)
                    result = runcpf(f"{CASEDIR}/{name}.py".replace("target",""),casedata,ppopt)
                    savejson({"basecase":result,"target":casedata},open(f"{name}.json","w"),result)
                    print(result,file=open(f"{name}_cpf.out","w"))
                    assert result[1] == 1, "runcpf failed"

                else:

                    print("PF",end="... ",flush=True,file=sys.stdout)
                    result = runpf(casedata,ppopt)
                    savejson(casedata,open(f"{name}.json","w"),result)
                    print(result,file=open(f"{name}_pf.out","w"))
                    assert result[1] == 1, "runpf failed"

                if "gencost" in casedata and "target" not in name:

                    print("OPF",end="... ",flush=True,file=sys.stdout)
                    result = runopf(casedata,ppopt)
                    savejson(casedata,open(f"{name}.json","w"),result)
                    print(result,file=open(f"{name}_opf.out","w"))
                    assert result["success"], "runopf failed"

                print("ok.",file=sys.stdout)

        except Exception as err:

            print(f"ERROR [{name}]: {err}",file=sys.stderr)
            e_type,e_value,e_trace = sys.exc_info()
            e_file = f"{name}.err"
            savejson(casedata,open(f"{name}.json","w"),
                result={
                    "exception":e_type.__name__,
                    "value":str(e_value),
                    "traceback":e_file
                    })
            with open(e_file,"w") as fh:
                trace = '\n'.join(traceback.format_tb(e_trace))
                print(f"EXCEPTION [{e_type.__name__}]: {e_value}\n\n{trace}",file=fh)
            failed += 1

print(f"Testing completed: {tested=}, {failed=}")

exit(1 if failed > 0 else 0)
